{"version":3,"sources":["services/api.js","containers/Signup.js","containers/Login.js","components/dashboard/Comment.js","components/dashboard/CommentBox.js","containers/Dashboard.js","services/trelloService.js","components/CardsList.js","App.js","serviceWorker.js","index.js"],"names":["login","username","password","axios","post","then","response","data","signup","Component","Comment","react_default","a","createElement","className","src","this","props","user","profileImg","height","alt","dist_default","content","CommentBox","state","comments","getComments","get","_this","setState","catch","err","console","log","postComment","event","map","x","Comment_Comment","key","_id","getCards","firstBatch","slice","card","name","category","indexOf","substr","trim","desc","labels","el","cardId","id","concat","resp","url","urls","attachments","populateCard","Promise","all","Object","toConsumableArray","CardsList","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","cards","lists","_this2","list","week","parseInt","split","day","length","index","App","setUser","components_CardsList","React","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.58bb55b6.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst login = (username, password) =>\n  axios\n    .post(\"/api/auth/login\", { username: username, password: password })\n    .then(response => response.data);\n\nconst signup = (username, password) =>\n  axios\n    .post(\"/api/auth/signup\", { username: username, password: password })\n    .then(response => response.data);\n\nconst logout = () =>\n  axios.post(\"/api/auth/logout\").then(response => response.data);\n\nexport { login, logout, signup };\n","import React, { Component } from \"react\";\nimport { Form, Button, Alert } from \"react-bootstrap\";\nimport { signup } from \"../services/api\";\n\nexport default class Signup extends Component {\n  state = {\n    username: \"\",\n    password: \"\",\n    error: \"\"\n  };\n\n  handleChange = event => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value\n    });\n  };\n\n  handleSubmit = event => {\n    const { username, password } = this.state;\n    event.preventDefault();\n\n    signup(username, password)\n      .then(data => {\n        this.props.setUser(data);\n        this.props.history.push(\"/\");\n      })\n      .catch(err => {\n        this.setState({ error: err.response.data.message });\n      });\n  };\n\n  render() {\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        <Form.Group>\n          <Form.Label htmlFor=\"username\">Username:</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"username\"\n            id=\"username\"\n            value={this.state.username}\n            onChange={this.handleChange}\n          />\n        </Form.Group>\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password:</Form.Label>\n          <Form.Control\n            type=\"password\"\n            name=\"password\"\n            id=\"password\"\n            value={this.state.password}\n            onChange={this.handleChange}\n          />\n        </Form.Group>\n\n        {this.state.error && (\n          <Alert variant=\"warning\">{this.state.error}</Alert>\n        )}\n\n        <Button type=\"submit\">Signup</Button>\n      </Form>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { login } from \"../services/api\";\nimport { Form, Button, Alert } from \"react-bootstrap\";\n\nexport default class Login extends Component {\n  state = {\n    username: \"\",\n    password: \"\",\n    error: \"\"\n  };\n\n  handleChange = event => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value\n    });\n  };\n\n  handleSubmit = event => {\n    const { username, password } = this.state;\n\n    event.preventDefault();\n\n    login(username, password)\n      .then(data => {\n        this.props.setUser(data);\n        this.props.history.push(\"/\");\n      })\n      .catch(err => {\n        this.setState({ error: err.response.data.message });\n      });\n  };\n\n  render() {\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        <Form.Group>\n          <Form.Label htmlFor=\"username\">Username:</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"username\"\n            id=\"username\"\n            value={this.state.username}\n            onChange={this.handleChange}\n          />\n        </Form.Group>\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password:</Form.Label>\n          <Form.Control\n            type=\"password\"\n            name=\"password\"\n            id=\"password\"\n            value={this.state.password}\n            onChange={this.handleChange}\n          />\n        </Form.Group>\n\n        {this.state.error && (\n          <Alert variant=\"warning\">{this.state.error}</Alert>\n        )}\n\n        <Button type=\"submit\">Login</Button>\n      </Form>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Linkify from 'react-linkify';\n\n\nexport default class Comment extends Component {\n  render() {\n    return (\n      <div className='article-comment'>\n        <img src={this.props.data.user.profileImg} height='100px' alt=\"Users profile img\" />\n        <div className='article-comment-content'>\n          <h3>{this.props.data.username}</h3>\n          <p><Linkify>{this.props.data.content}</Linkify></p>\n        </div>\n      </div>\n    )\n  }\n}\n\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Comment from './Comment';\n\n//need get post delete \n\nexport default class CommentBox extends Component {\n  state = {\n    comments: []\n  }\n\n  getComments = () => {\n    axios.get('/api/comments/').then(response => {\n      this.setState({\n        comments: response.data\n      });\n    })\n    .catch(err => {\n      console.log(err);\n    });\n  }\n\n  componentDidMount() {\n    this.getComments();\n  }\n\n  postComment = event => {\n    // event.targ\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.comments.map(x => {\n          return <Comment key={x._id} data={x}/>\n        })}\n      </div>\n    )\n  }\n}\n\n","import React, { Component } from 'react';\nimport CommentBox from '../components/dashboard/CommentBox'\n\nexport default class Dashboard extends Component {\n  state = {\n    size: '100%'\n  }\n  render() {\n    return (\n      <div style={{display: 'flex', flexWrap: 'wrap'}}>\n        <div style={{height: '40vh', width: '50%', backgroundColor: '#FF0'}}><CommentBox /></div>\n        <div style={{height: '40vh', width: '50%', backgroundColor: '#F00'}}></div>\n        <div style={{height: '40vh', width: '50%', backgroundColor: '#CC0'}}></div>\n        <div style={{height: '40vh', width: '50%', backgroundColor: '#2C2'}}></div>\n      </div>\n    )\n  }\n}\n","import axios from \"axios\";\n\nconst lists = () =>\n  axios\n    .get(\n      `https://api.trello.com/1/boards/JIVynIm1/lists?key=eb627225b1977b30f088094e7b793383&token=596e22c5d280793a5bd98c6883d6e1014fe4cc18b549f4fafbdd3a5947ed07ac`\n    )\n    .then(response => {\n      return response.data.map(list => {\n        let name = list.name;\n        let week = parseInt(name.split(\"Week \")[1]) || null;\n        let day =\n          parseInt(name.split(\"Day \")[name.split(\"Day \").length - 1]) || null;\n        console.log({ name, week, day, id: list.id });\n        return { name, week, day, id: list.id };\n      });\n    })\n    .catch(err => console.log(err));\n\nconst getCards = () =>\n  axios\n    .get(\n      `https://api.trello.com/1/boards/JIVynIm1/cards?key=eb627225b1977b30f088094e7b793383&token=596e22c5d280793a5bd98c6883d6e1014fe4cc18b549f4fafbdd3a5947ed07ac`\n    )\n    .then(response => {\n      let firstBatch = response.data\n        .slice(0, 98)\n        .map(card => populateCard(card));\n      return Promise.all([...firstBatch]);\n    });\n\nfunction populateCard(card) {\n  let name = card.name;\n  let category =\n    name.indexOf(\"|\") !== -1 ? name.substr(0, name.indexOf(\"|\")).trim() : null;\n  let desc = card.desc;\n  let labels = card.labels.map(el => el.name);\n  return getUrlsFromCard(card.id).then(urls => {\n    return { name, category, desc, labels, id: card.id, attachments: urls };\n  });\n}\n\nfunction getUrlsFromCard(cardId) {\n  return axios\n    .get(\n      `https://api.trello.com/1/cards/${cardId}/attachments?key=eb627225b1977b30f088094e7b793383&token=596e22c5d280793a5bd98c6883d6e1014fe4cc18b549f4fafbdd3a5947ed07ac`\n    )\n    .then(resp => resp.data.map(el => el.url));\n}\n\nfunction getCategoriesFromCards() {\n  getCards().then(cards => {\n    let categories = cards\n      .map(el => el.name)\n      .filter(el => el.indexOf(\"|\") !== -1)\n      .map(el => el.substr(0, el.indexOf(\"|\")).trim());\n    console.log(categories);\n  });\n}\n\nexport { lists, getCards /* , dayCards */ };\n","import React, { Component } from \"react\";\nimport { getCards, lists /* , dayCards */ } from \"../services/trelloService\";\n\nclass CardsList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { cards: [], lists: [] };\n  }\n\n  componentDidMount() {\n    getCards()\n      .then(response => {\n        this.setState({ cards: response });\n        lists().then(response => {\n          console.log(response);\n          this.setState({ lists: response });\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"columns\">\n        <div className=\"column\">\n          <ul>\n            {this.state.cards.map((el, index) => (\n              <li key={index}>{el.name}</li>\n            ))}\n          </ul>\n        </div>\n        <div className=\"column\">\n          <ul>\n            {this.state.lists.map((el, index) => (\n              <li key={index}>{/* <Day week=\"1\" day=\"1\" /> */ el.name}</li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CardsList;\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\n\nimport Navbar from \"./components/Navbar\";\nimport Protected from \"./components/Protected\";\nimport Home from \"./containers/Home\";\nimport Signup from \"./containers/Signup\";\nimport Login from \"./containers/Login\";\nimport Dashboard from \"./containers/Dashboard\";\nimport CardsList from \"./components/CardsList\";\n\nclass App extends React.Component {\n  // state = {\n  //   user: this.props.user\n  // };\n\n  setUser = user => {\n    this.setState({\n      user: user\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        {/* <Navbar setUser={this.setUser} user={this.state.user} />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path='/dashboard' component={Dashboard} />\n          <Protected\n            exact\n            path=\"/signup\"\n            redirectPath=\"/\"\n            setUser={this.setUser}\n            user={!this.state.user}\n            component={Signup}\n          />\n          <Protected\n            exact\n            path=\"/login\"\n            redirectPath=\"/\"\n            setUser={this.setUser}\n            user={!this.state.user}\n            component={Login}\n          />\n        </Switch> */}\n        <CardsList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport axios from \"axios\";\n\naxios\n  .get(\"/api/auth/loggedin\")\n  .then(response => {\n    console.log(response)\n    ReactDOM.render(\n      <BrowserRouter>\n        <App user={response.data} />\n      </BrowserRouter>,\n      document.getElementById(\"root\")\n    );\n  })\n  .catch(err => {\n    console.log(err);\n  });\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}